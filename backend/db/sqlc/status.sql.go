// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: status.sql

package db

import (
	"context"
)

const createStatus = `-- name: CreateStatus :one
INSERT INTO status (
    status_name
) VALUES ( 
    $1
) RETURNING status_id, status_name
`

func (q *Queries) CreateStatus(ctx context.Context, statusName string) (Status, error) {
	row := q.db.QueryRowContext(ctx, createStatus, statusName)
	var i Status
	err := row.Scan(&i.StatusID, &i.StatusName)
	return i, err
}

const getStatus = `-- name: GetStatus :one
SELECT status_id, status_name FROM status WHERE status_id = $1
`

func (q *Queries) GetStatus(ctx context.Context, statusID int32) (Status, error) {
	row := q.db.QueryRowContext(ctx, getStatus, statusID)
	var i Status
	err := row.Scan(&i.StatusID, &i.StatusName)
	return i, err
}

const getStatuses = `-- name: GetStatuses :many
SELECT status_id, status_name FROM status ORDER BY status_name
`

func (q *Queries) GetStatuses(ctx context.Context) ([]Status, error) {
	rows, err := q.db.QueryContext(ctx, getStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Status{}
	for rows.Next() {
		var i Status
		if err := rows.Scan(&i.StatusID, &i.StatusName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
