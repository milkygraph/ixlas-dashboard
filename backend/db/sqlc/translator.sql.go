// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: translator.sql

package db

import (
	"context"
)

const createTranslator = `-- name: CreateTranslator :one
INSERT INTO translator (
    name,
    surname,
    phone_number,
    email
) VALUES ( 
    $1, $2, $3, $4
) RETURNING translator_id, name, surname, phone_number, email
`

type CreateTranslatorParams struct {
	Name        string `json:"name"`
	Surname     string `json:"surname"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
}

func (q *Queries) CreateTranslator(ctx context.Context, arg CreateTranslatorParams) (Translator, error) {
	row := q.db.QueryRowContext(ctx, createTranslator,
		arg.Name,
		arg.Surname,
		arg.PhoneNumber,
		arg.Email,
	)
	var i Translator
	err := row.Scan(
		&i.TranslatorID,
		&i.Name,
		&i.Surname,
		&i.PhoneNumber,
		&i.Email,
	)
	return i, err
}

const deleteTranslator = `-- name: DeleteTranslator :exec
DELETE FROM translator WHERE translator_id = $1
`

func (q *Queries) DeleteTranslator(ctx context.Context, translatorID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTranslator, translatorID)
	return err
}

const getTranslator = `-- name: GetTranslator :one
SELECT translator_id, name, surname, phone_number, email FROM translator WHERE translator_id = $1
`

func (q *Queries) GetTranslator(ctx context.Context, translatorID int64) (Translator, error) {
	row := q.db.QueryRowContext(ctx, getTranslator, translatorID)
	var i Translator
	err := row.Scan(
		&i.TranslatorID,
		&i.Name,
		&i.Surname,
		&i.PhoneNumber,
		&i.Email,
	)
	return i, err
}

const getTranslators = `-- name: GetTranslators :many
SELECT translator_id, name, surname, phone_number, email FROM translator ORDER BY name
`

func (q *Queries) GetTranslators(ctx context.Context) ([]Translator, error) {
	rows, err := q.db.QueryContext(ctx, getTranslators)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Translator{}
	for rows.Next() {
		var i Translator
		if err := rows.Scan(
			&i.TranslatorID,
			&i.Name,
			&i.Surname,
			&i.PhoneNumber,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTranslator = `-- name: UpdateTranslator :one
UPDATE translator SET
    name = $2,
    surname = $3,
    phone_number = $4,
    email = $5
WHERE translator_id = $1
RETURNING translator_id, name, surname, phone_number, email
`

type UpdateTranslatorParams struct {
	TranslatorID int64  `json:"translator_id"`
	Name         string `json:"name"`
	Surname      string `json:"surname"`
	PhoneNumber  string `json:"phone_number"`
	Email        string `json:"email"`
}

func (q *Queries) UpdateTranslator(ctx context.Context, arg UpdateTranslatorParams) (Translator, error) {
	row := q.db.QueryRowContext(ctx, updateTranslator,
		arg.TranslatorID,
		arg.Name,
		arg.Surname,
		arg.PhoneNumber,
		arg.Email,
	)
	var i Translator
	err := row.Scan(
		&i.TranslatorID,
		&i.Name,
		&i.Surname,
		&i.PhoneNumber,
		&i.Email,
	)
	return i, err
}
