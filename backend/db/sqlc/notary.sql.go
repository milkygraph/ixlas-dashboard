// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: notary.sql

package db

import (
	"context"
)

const createNotary = `-- name: CreateNotary :one
INSERT INTO notary (
    notary_name
) VALUES ( 
    $1
) RETURNING notary_id, notary_name
`

func (q *Queries) CreateNotary(ctx context.Context, notaryName string) (Notary, error) {
	row := q.db.QueryRowContext(ctx, createNotary, notaryName)
	var i Notary
	err := row.Scan(&i.NotaryID, &i.NotaryName)
	return i, err
}

const deleteNotary = `-- name: DeleteNotary :exec
DELETE FROM notary WHERE notary_id = $1
`

func (q *Queries) DeleteNotary(ctx context.Context, notaryID int32) error {
	_, err := q.db.ExecContext(ctx, deleteNotary, notaryID)
	return err
}

const getNotaries = `-- name: GetNotaries :many
SELECT notary_id, notary_name FROM notary ORDER BY notary_name
`

func (q *Queries) GetNotaries(ctx context.Context) ([]Notary, error) {
	rows, err := q.db.QueryContext(ctx, getNotaries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notary{}
	for rows.Next() {
		var i Notary
		if err := rows.Scan(&i.NotaryID, &i.NotaryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotary = `-- name: GetNotary :one
SELECT notary_id, notary_name FROM notary WHERE notary_id = $1
`

func (q *Queries) GetNotary(ctx context.Context, notaryID int32) (Notary, error) {
	row := q.db.QueryRowContext(ctx, getNotary, notaryID)
	var i Notary
	err := row.Scan(&i.NotaryID, &i.NotaryName)
	return i, err
}

const updateNotary = `-- name: UpdateNotary :one
UPDATE notary SET
    notary_name = $2
WHERE notary_id = $1
RETURNING notary_id, notary_name
`

type UpdateNotaryParams struct {
	NotaryID   int32  `json:"notary_id"`
	NotaryName string `json:"notary_name"`
}

func (q *Queries) UpdateNotary(ctx context.Context, arg UpdateNotaryParams) (Notary, error) {
	row := q.db.QueryRowContext(ctx, updateNotary, arg.NotaryID, arg.NotaryName)
	var i Notary
	err := row.Scan(&i.NotaryID, &i.NotaryName)
	return i, err
}
